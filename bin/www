#!/usr/bin/env node

/* This file had been auto generated by WebStorm and had been adjusted to fit our needs */

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('webauthn:server');
const https = require('https');
const fs = require('fs');


const logger = require('../config/logger');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

logger.info('Server listening on port', port);
logger.info('The server uses the origin https://ascensus.com. Make sure that https://ascensus.com resolves to your localhost. On windows you can achieve this by adding `127.0.0.1 ascensus.com` in the file `C:/Windows/System32/drivers/etc/hosts`.');

/**
 * Create HTTPS server.
 */

const options = {
    key: fs.readFileSync('config/server.key'),
    cert: fs.readFileSync('config/server.cert'),
    ca: fs.readFileSync('config/server.cert')
};

const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
